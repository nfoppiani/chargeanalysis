#include "services_microboone.fcl"

BEGIN_PROLOG

ChargeAnalyzer:
{ 
    module_type:                "ChargeAnalyzer"
    pfp_producer:               "pandoraNu"

    HitProducer:            "pandoraCosmicHitRemoval"
    GeantModule:            "largeant"
    SpacePointProducer:     "pandoraNu"
    MCPHitAssProducer:      "crHitRemovalTruthMatch"

    UsePremadeMCPHitAss:    true
}

END_PROLOG


process_name: ChargeAnalyzer      #The process name must NOT contain any underscores

source: 
{
  module_type: RootInput
  maxEvents:   -1
}

services: {

  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  TFileService: { fileName: "ChargeAnalyzer.root" }
  #TPCEnergyCalibService:         @local::microboone_tpcenergycalib_service
  #Timing:       {}
  #SimpleMemoryCheck:     { ignoreTotal: 1 }     #default is one
  RandomNumberGenerator: {}                     #ART native random number generator
  message:      @local::standard_info
  #user:
  #{
	# BELOW you see a list of the common services! Uncomment the ones you need.
  #  	ExptGeoHelperInterface:         @local::microboone_geometry_helper
  #  	Geometry:                       @local::microboone_geo
  # 	DetectorProperties:             @local::microboone_detproperties
  # 	LArProperties:                  @local::microboone_properties
  # 	DatabaseUtil:                   @local::microboone_database
  # 	TimeService:                    @local::microboone_timeservice
  # 	SpaceCharge:                    @local::microboone_spacecharge
  # 	SeedService:                    @local::microboone_seedservice
  #	LArFFT:                         @local::microboone_larfft
  #	SignalShapingServiceMicroBooNE: @local::microboone_signalshapingservice
  #	BackTracker:                    @local::microboone_backtracker  
  # MemoryPeakReporter: {}
  # OpDigiProperties:               @local::microboone_opdigiproperties
  #}

}

physics: {

  producers: {
     # ParameterSets for zero or more producer modules
  }
  analyzers: {
     # ParameterSets for zero or more analyzer modules
     ChargeAnalyzer: @local::ChargeAnalyzer
  }

  filters: {
     # ParameterSets for zero or more filter modules
  }

  # analyzeIt:[
  #        
  #           ]
  path0: [ ChargeAnalyzer ]
  stream: [ out0 ]
  #path1 : [  comma separated list of module labels of producer or filter modules  ]
  #path2 : [  comma separated list of module labels of analyzer or output modules  ]
  #path3 : [  comma separated list of module labels of analyzer or output modules  ]

  trigger_paths: [ ]
  end_paths:    [ path0 ]

}

outputs.out0: { module_type: RootOutput
                fileName:    "output.root" 
                dataTier:    "hits" 
                streamName:  "all" 
                SelectEvents: [ path0 ]
                compressionLevel: 1
              }
